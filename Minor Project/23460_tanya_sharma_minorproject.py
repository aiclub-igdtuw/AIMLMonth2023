# -*- coding: utf-8 -*-
"""23460_Tanya Sharma_MinorProject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W6qFcCuY_SpJf0K9zFu0JA-z9GXT51-3

# **MINOR PROJECT**

---

# **TASK 1** - Exploratory Data Analysis
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings

"""<-----------------------Question 1----------------------------->"""

# Load the dataset into a DataFrame
df = pd.read_csv('data.csv')

# Select the year and colleges of interest
year = 2021
colleges = ['IIT-Bombay', 'IIT-Delhi', 'IIT-Kharagpur', 'IIT-Kanpur', 'IIT-Madras']
# Filter the DataFrame for the selected year and colleges
filtered_df = df[(df['year'] == year) & (df['institute_short'].isin(colleges))]

# Calculate the difference in opening and closing ranks
filtered_df['Rank Difference'] = filtered_df['closing_rank'] - filtered_df['opening_rank']

# Display the result
print(filtered_df)

"""**Summarizing**
We were able to determine the difference between the opening and closing rankings of any five IITS in 2021 as a result.
As Colab cannot display all rows, it is displaying first and last five rows.

<-----------------------Question 2----------------------------->
"""

#2 question
# Find duplicate rows
duplicate_rows = df[df.duplicated()]

# Display duplicate rows
print("Duplicate Rows:")
print(duplicate_rows)

# Remove duplicate rows
df.drop_duplicates(inplace=True)
# Display the DataFrame after removing duplicates
print("DataFrame after removing duplicates:")
print(df)

"""**Summarizing**
Therefore, we succesfully identified duplicate entries and removed them to ensure data integrity.

<-----------------------Question 3----------------------------->
"""

#3 Question
# Select the column for which you want to find outliers
column_of_interest = 'closing_rank'
# Select the two branches in the other column
branch1 = 'Computer Science and Engineering'
branch2 = 'Electrical Engineering'

# Filter the DataFrame for the selected branches
filtered_df = df[(df['program_name'] == branch1) | (df['program_name'] == branch2)]

# Use box plot to identify outliers
sns.boxplot(x=filtered_df['program_name'], y=filtered_df[column_of_interest])
plt.xlabel('Branch')
plt.ylabel('Numeric Column')
plt.title('Outliers in {} for {} and {}'.format(column_of_interest, branch1, branch2))
plt.show()

"""<-----------------------Question 4----------------------------->"""

# 4th question
# Select the column and item of interest
column_name = 'institute_short'
item_of_interest = 'NIT-Tiruchirappalli'

# Filter the DataFrame for the selected item
filtered_df = df[df[column_name] == item_of_interest]

# Count the occurrences of each category
category_counts = filtered_df['category'].value_counts()

# Plot the distribution
category_counts.plot(kind='bar')
plt.xlabel('Category')
plt.ylabel('Count')
plt.title('Distribution of Categories for {}'.format(item_of_interest))
plt.show()

"""**Sumarizing**
Here we were able to show distibution of diffferent categeory for NIT.

<-----------------------Question 5----------------------------->
"""

#5 question
counts = df['program_name'].value_counts()
counts
figure = plt.figure(figsize =(20, 20))
counts.plot(kind='bar')

plt.title('Program name distribution')
plt.xlabel('program_name')
plt.ylabel('Count')
plt.show()

"""# **TASK 2** - Classification/Regression

Perform following steps on the same dataset which you used for EDA.
> - Data Preprocessing (as per requirement)
> - Feature Engineering
> - Split dataset in train-test (80:20 ratio)
> - Model selection
> - Model training
> - Model evaluation
> - Fine-tune the Model
> - Make predictions

**Data Preprocessing (as per requirement)**
"""

# missing values:
missing_values = df.isna()

missing_counts = missing_values.sum()
missing_counts
Pred_College = df
Pred_College.head()
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
Pred_College['quota'] = le.fit_transform(Pred_College['quota'])
Pred_College['quota'].unique()
Pred_College['institute_type'] = le.fit_transform(Pred_College['institute_type'])
Pred_College['institute_type'].unique()
Pred_College['pool'] = le.fit_transform(Pred_College['pool'])
Pred_College['pool'].unique()
Pred_College['institute_short'] = le.fit_transform(Pred_College['institute_short'])
Pred_College['institute_short'].unique()
Pred_College['program_duration'] = le.fit_transform(Pred_College['program_duration'])
Pred_College['program_duration'].unique()
Pred_College['degree_short'] = le.fit_transform(Pred_College['degree_short'])
Pred_College['degree_short'].unique()
Pred_College['category'] = le.fit_transform(Pred_College['category'])
Pred_College['category'].unique()
Pred_College['program_name'] = le.fit_transform(Pred_College['program_name'])
Pred_College['program_name'].unique()

# Target data

y = Pred_College[['institute_short', 'program_name', 'degree_short']]
X = Pred_College[['institute_type', 'round_no', 'quota', 'pool',
       'category', 'opening_rank', 'closing_rank']]
Pred_College.dtypes

"""**Split dataset in train-test (80:20 ratio)**"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.8 , shuffle=True)
a = np.array([X_train.shape, X_test.shape, y_train.shape, y_test.shape], dtype = 'object')
a

"""**Model selection and Model training**"""

#linear regression model
from sklearn.impute import SimpleImputer

# Check for missing values in X_train
missing_values = X_train.isnull().sum()
print(missing_values)

# Create a SimpleImputer object
imputer = SimpleImputer(strategy='mean')

# Fit the imputer on X_train
imputer.fit(X_train)

# Apply the imputation to X_train
X_train_imputed = imputer.transform(X_train)

# Fit the model on the imputed training data
model.fit(X_train_imputed, y_train)

"""**Make predictions**"""

y_pred = model.predict(X_test)
mean_absolute_error(y_pred, y_test)